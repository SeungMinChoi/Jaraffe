//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldView;                // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gWorldInvTransposeView;    // Offset:  192, size:   64
}

//
// 4 local object(s)
//
Texture2D gNormalMap;
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 4 technique(s)
    //
    technique11 GBuffer
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // POSITION                 1   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // NORMAL                   1   xyz         4     NONE  float   xyz 
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                // TANGENT                  1   xyz         6     NONE  float   xyz 
                // BITANGENT                0   xyz         7     NONE  float   xyz 
                // BITANGENT                1   xyz         8     NONE  float   xyz 
                // TEXCOORD                 0   xy          9     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_output o6.xyz
                dcl_output o7.xyz
                dcl_output o8.xyz
                dcl_output o9.xy
                dcl_temps 10
                
                #line 62 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\GBuffer\GBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // vout<7:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // vout<8:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // vout<9:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[12].xyzx  // vout<13:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[13].xyzx  // vout<14:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[14].xyzx  // vout<15:NaN:Inf>
                dp3 r3.x, v3.xyzx, cb0[4].xyzx
                dp3 r3.y, v3.xyzx, cb0[5].xyzx
                dp3 r3.z, v3.xyzx, cb0[6].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // vout<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mul r4.xyz, r2.yzxy, r3.zxyz
                mul r5.xyz, r2.zxyz, r3.yzxy
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r4.xyzx, v3.wwww
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // vout<25:NaN:Inf,26:NaN:Inf,27:NaN:Inf>
                
                #line 68
                dp3 r5.x, v1.xyzx, cb0[0].xyzx
                dp3 r5.y, v1.xyzx, cb0[1].xyzx
                dp3 r5.z, v1.xyzx, cb0[2].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // vout<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                
                #line 71
                dp3 r6.x, v3.xyzx, cb0[0].xyzx
                dp3 r6.y, v3.xyzx, cb0[1].xyzx
                dp3 r6.z, v3.xyzx, cb0[2].xyzx
                dp3 r1.w, r6.xyzx, r6.xyzx
                rsq r1.w, r1.w
                mul r6.xyz, r1.wwww, r6.xyzx  // vout<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mul r7.xyz, r5.yzxy, r6.zxyz
                mul r8.xyz, r5.zxyz, r6.yzxy
                mov r8.xyz, -r8.xyzx
                add r7.xyz, r7.xyzx, r8.xyzx
                mul r7.xyz, r7.xyzx, v3.wwww
                dp3 r1.w, r7.xyzx, r7.xyzx
                rsq r1.w, r1.w
                mul r7.xyz, r1.wwww, r7.xyzx  // vout<22:NaN:Inf,23:NaN:Inf,24:NaN:Inf>
                
                #line 75
                dp4 r8.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r8.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r8.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                
                #line 78
                dp4 r9.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r9.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r9.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r9.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 81
                mov r0.xy, v2.xyxx  // vout<28,29>
                mov o0.xyzw, r9.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r8.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r1.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r5.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xyz, r2.xyzx  // VS<13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o5.xyz, r6.xyzx  // VS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o6.xyz, r3.xyzx  // VS<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mov o7.xyz, r7.xyzx  // VS<22:NaN:Inf,23:NaN:Inf,24:NaN:Inf>
                mov o8.xyz, r4.xyzx  // VS<25:NaN:Inf,26:NaN:Inf,27:NaN:Inf>
                mov o9.xy, r0.xyxx  // VS<28,29>
                ret 
                // Approximately 61 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // POSITION                 1   xyz         2     NONE  float     z 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // NORMAL                   1   xyz         4     NONE  float   xyz 
                // TANGENT                  0   xyz         5     NONE  float       
                // TANGENT                  1   xyz         6     NONE  float       
                // BITANGENT                0   xyz         7     NONE  float       
                // BITANGENT                1   xyz         8     NONE  float       
                // TEXCOORD                 0   xy          9     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                // SV_Target                1   xyzw        1   TARGET  float   xyzw
                // SV_Target                2   xyzw        2   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.z
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_temps 3
                
                #line 121 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\GBuffer\GBuffer.fx"
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r1.x, v4.xyzx, v4.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v4.xyzx  // pin<13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                
                #line 128
                mov r0.xyz, r0.xyzx  // output<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r2.xyz, v1.xyzx  // output<4,5,6>
                mov r2.w, l(1.000000)  // output<7: 1f>
                mov r1.xyz, r1.xyzx  // output<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov r1.w, v2.z  // output<11>
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                mov o1.xyzw, r2.xyzw  // PS<4,5,6,7: 1f>
                mov o2.xyzw, r1.xyzw  // PS<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11>
                ret 
                // Approximately 16 instruction slots used
                            
            };
        }

    }

    technique11 GBufferNormal
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // POSITION                 1   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // NORMAL                   1   xyz         4     NONE  float   xyz 
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                // TANGENT                  1   xyz         6     NONE  float   xyz 
                // BITANGENT                0   xyz         7     NONE  float   xyz 
                // BITANGENT                1   xyz         8     NONE  float   xyz 
                // TEXCOORD                 0   xy          9     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_output o6.xyz
                dcl_output o7.xyz
                dcl_output o8.xyz
                dcl_output o9.xy
                dcl_temps 10
                
                #line 62 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\GBuffer\GBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // vout<7:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // vout<8:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // vout<9:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[12].xyzx  // vout<13:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[13].xyzx  // vout<14:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[14].xyzx  // vout<15:NaN:Inf>
                dp3 r3.x, v3.xyzx, cb0[4].xyzx
                dp3 r3.y, v3.xyzx, cb0[5].xyzx
                dp3 r3.z, v3.xyzx, cb0[6].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // vout<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mul r4.xyz, r2.yzxy, r3.zxyz
                mul r5.xyz, r2.zxyz, r3.yzxy
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r4.xyzx, v3.wwww
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // vout<25:NaN:Inf,26:NaN:Inf,27:NaN:Inf>
                
                #line 68
                dp3 r5.x, v1.xyzx, cb0[0].xyzx
                dp3 r5.y, v1.xyzx, cb0[1].xyzx
                dp3 r5.z, v1.xyzx, cb0[2].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // vout<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                
                #line 71
                dp3 r6.x, v3.xyzx, cb0[0].xyzx
                dp3 r6.y, v3.xyzx, cb0[1].xyzx
                dp3 r6.z, v3.xyzx, cb0[2].xyzx
                dp3 r1.w, r6.xyzx, r6.xyzx
                rsq r1.w, r1.w
                mul r6.xyz, r1.wwww, r6.xyzx  // vout<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mul r7.xyz, r5.yzxy, r6.zxyz
                mul r8.xyz, r5.zxyz, r6.yzxy
                mov r8.xyz, -r8.xyzx
                add r7.xyz, r7.xyzx, r8.xyzx
                mul r7.xyz, r7.xyzx, v3.wwww
                dp3 r1.w, r7.xyzx, r7.xyzx
                rsq r1.w, r1.w
                mul r7.xyz, r1.wwww, r7.xyzx  // vout<22:NaN:Inf,23:NaN:Inf,24:NaN:Inf>
                
                #line 75
                dp4 r8.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r8.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r8.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                
                #line 78
                dp4 r9.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r9.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r9.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r9.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 81
                mov r0.xy, v2.xyxx  // vout<28,29>
                mov o0.xyzw, r9.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r8.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r1.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r5.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xyz, r2.xyzx  // VS<13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o5.xyz, r6.xyzx  // VS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o6.xyz, r3.xyzx  // VS<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mov o7.xyz, r7.xyzx  // VS<22:NaN:Inf,23:NaN:Inf,24:NaN:Inf>
                mov o8.xyz, r4.xyzx  // VS<25:NaN:Inf,26:NaN:Inf,27:NaN:Inf>
                mov o9.xy, r0.xyxx  // VS<28,29>
                ret 
                // Approximately 61 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // POSITION                 1   xyz         2     NONE  float     z 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // NORMAL                   1   xyz         4     NONE  float   xyz 
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                // TANGENT                  1   xyz         6     NONE  float   xyz 
                // BITANGENT                0   xyz         7     NONE  float   xyz 
                // BITANGENT                1   xyz         8     NONE  float   xyz 
                // TEXCOORD                 0   xy          9     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                // SV_Target                1   xyzw        1   TARGET  float   xyzw
                // SV_Target                2   xyzw        2   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.z
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v5.xyz
                dcl_input_ps linear v6.xyz
                dcl_input_ps linear v7.xyz
                dcl_input_ps linear v8.xyz
                dcl_input_ps linear v9.xy
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_temps 7
                
                #line 103 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\GBuffer\GBuffer.fx"
                dp3 r0.x, v5.xyzx, v5.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v5.xyzx  // tangentFrameW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, v7.xyzx, v7.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v7.xyzx  // tangentFrameW<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                dp3 r0.w, v3.xyzx, v3.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v3.xyzx  // tangentFrameW<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                
                #line 108
                dp3 r0.w, v6.xyzx, v6.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, v6.xyzx  // tangentFrameV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, v8.xyzx, v8.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, v8.xyzx  // tangentFrameV<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                dp3 r0.w, v4.xyzx, v4.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, v4.xyzx  // tangentFrameV<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r6.xyz, v9.xyxx, t0.xyzw, s0
                mov r6.xyz, r6.xyzx  // normalT<0:Inf,1:Inf,2:Inf>
                mul r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r6.xyz, r6.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx  // normalT<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 114
                mul r0.xyz, r0.xyzx, r6.xxxx
                mul r1.xyz, r1.xyzx, r6.yyyy
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, r2.xyzx, r6.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 117
                mul r1.xyz, r3.xyzx, r6.xxxx
                mul r2.xyz, r4.xyzx, r6.yyyy
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, r5.xyzx, r6.zzzz
                add r1.xyz, r1.xyzx, r2.xyzx  // pin<13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                
                #line 128
                mov r0.xyz, r0.xyzx  // output<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r2.xyz, v1.xyzx  // output<4,5,6>
                mov r2.w, l(1.000000)  // output<7: 1f>
                mov r1.xyz, r1.xyzx  // output<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov r1.w, v2.z  // output<11>
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                mov o1.xyzw, r2.xyzw  // PS<4,5,6,7: 1f>
                mov o2.xyzw, r1.xyzw  // PS<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11>
                ret 
                // Approximately 45 instruction slots used
                            
            };
        }

    }

    technique11 GBufferAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // POSITION                 1   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // NORMAL                   1   xyz         4     NONE  float   xyz 
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                // TANGENT                  1   xyz         6     NONE  float   xyz 
                // BITANGENT                0   xyz         7     NONE  float   xyz 
                // BITANGENT                1   xyz         8     NONE  float   xyz 
                // TEXCOORD                 0   xy          9     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_output o6.xyz
                dcl_output o7.xyz
                dcl_output o8.xyz
                dcl_output o9.xy
                dcl_temps 10
                
                #line 62 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\GBuffer\GBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // vout<7:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // vout<8:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // vout<9:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[12].xyzx  // vout<13:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[13].xyzx  // vout<14:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[14].xyzx  // vout<15:NaN:Inf>
                dp3 r3.x, v3.xyzx, cb0[4].xyzx
                dp3 r3.y, v3.xyzx, cb0[5].xyzx
                dp3 r3.z, v3.xyzx, cb0[6].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // vout<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mul r4.xyz, r2.yzxy, r3.zxyz
                mul r5.xyz, r2.zxyz, r3.yzxy
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r4.xyzx, v3.wwww
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // vout<25:NaN:Inf,26:NaN:Inf,27:NaN:Inf>
                
                #line 68
                dp3 r5.x, v1.xyzx, cb0[0].xyzx
                dp3 r5.y, v1.xyzx, cb0[1].xyzx
                dp3 r5.z, v1.xyzx, cb0[2].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // vout<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                
                #line 71
                dp3 r6.x, v3.xyzx, cb0[0].xyzx
                dp3 r6.y, v3.xyzx, cb0[1].xyzx
                dp3 r6.z, v3.xyzx, cb0[2].xyzx
                dp3 r1.w, r6.xyzx, r6.xyzx
                rsq r1.w, r1.w
                mul r6.xyz, r1.wwww, r6.xyzx  // vout<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mul r7.xyz, r5.yzxy, r6.zxyz
                mul r8.xyz, r5.zxyz, r6.yzxy
                mov r8.xyz, -r8.xyzx
                add r7.xyz, r7.xyzx, r8.xyzx
                mul r7.xyz, r7.xyzx, v3.wwww
                dp3 r1.w, r7.xyzx, r7.xyzx
                rsq r1.w, r1.w
                mul r7.xyz, r1.wwww, r7.xyzx  // vout<22:NaN:Inf,23:NaN:Inf,24:NaN:Inf>
                
                #line 75
                dp4 r8.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r8.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r8.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                
                #line 78
                dp4 r9.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r9.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r9.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r9.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 81
                mov r0.xy, v2.xyxx  // vout<28,29>
                mov o0.xyzw, r9.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r8.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r1.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r5.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xyz, r2.xyzx  // VS<13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o5.xyz, r6.xyzx  // VS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o6.xyz, r3.xyzx  // VS<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mov o7.xyz, r7.xyzx  // VS<22:NaN:Inf,23:NaN:Inf,24:NaN:Inf>
                mov o8.xyz, r4.xyzx  // VS<25:NaN:Inf,26:NaN:Inf,27:NaN:Inf>
                mov o9.xy, r0.xyxx  // VS<28,29>
                ret 
                // Approximately 61 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // POSITION                 1   xyz         2     NONE  float     z 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // NORMAL                   1   xyz         4     NONE  float   xyz 
                // TANGENT                  0   xyz         5     NONE  float       
                // TANGENT                  1   xyz         6     NONE  float       
                // BITANGENT                0   xyz         7     NONE  float       
                // BITANGENT                1   xyz         8     NONE  float       
                // TEXCOORD                 0   xy          9     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                // SV_Target                1   xyzw        1   TARGET  float   xyzw
                // SV_Target                2   xyzw        2   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.z
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v9.xy
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_temps 3
                
                #line 91 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\GBuffer\GBuffer.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v9.xyxx, t0.wxyz, s0
                mov r0.x, r0.x  // texColor<3:Inf>
                add r0.x, r0.x, l(-0.100000)
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard r0.x
                
                #line 121
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r1.x, v4.xyzx, v4.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v4.xyzx  // pin<13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                
                #line 128
                mov r0.xyz, r0.xyzx  // output<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r2.xyz, v1.xyzx  // output<4,5,6>
                mov r2.w, l(1.000000)  // output<7: 1f>
                mov r1.xyz, r1.xyzx  // output<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov r1.w, v2.z  // output<11>
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                mov o1.xyzw, r2.xyzw  // PS<4,5,6,7: 1f>
                mov o2.xyzw, r1.xyzw  // PS<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11>
                ret 
                // Approximately 22 instruction slots used
                            
            };
        }

    }

    technique11 GBufferNormalAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // POSITION                 1   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // NORMAL                   1   xyz         4     NONE  float   xyz 
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                // TANGENT                  1   xyz         6     NONE  float   xyz 
                // BITANGENT                0   xyz         7     NONE  float   xyz 
                // BITANGENT                1   xyz         8     NONE  float   xyz 
                // TEXCOORD                 0   xy          9     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_output o6.xyz
                dcl_output o7.xyz
                dcl_output o8.xyz
                dcl_output o9.xy
                dcl_temps 10
                
                #line 62 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\GBuffer\GBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // vout<7:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // vout<8:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // vout<9:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[12].xyzx  // vout<13:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[13].xyzx  // vout<14:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[14].xyzx  // vout<15:NaN:Inf>
                dp3 r3.x, v3.xyzx, cb0[4].xyzx
                dp3 r3.y, v3.xyzx, cb0[5].xyzx
                dp3 r3.z, v3.xyzx, cb0[6].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // vout<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mul r4.xyz, r2.yzxy, r3.zxyz
                mul r5.xyz, r2.zxyz, r3.yzxy
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r4.xyzx, v3.wwww
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // vout<25:NaN:Inf,26:NaN:Inf,27:NaN:Inf>
                
                #line 68
                dp3 r5.x, v1.xyzx, cb0[0].xyzx
                dp3 r5.y, v1.xyzx, cb0[1].xyzx
                dp3 r5.z, v1.xyzx, cb0[2].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // vout<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                
                #line 71
                dp3 r6.x, v3.xyzx, cb0[0].xyzx
                dp3 r6.y, v3.xyzx, cb0[1].xyzx
                dp3 r6.z, v3.xyzx, cb0[2].xyzx
                dp3 r1.w, r6.xyzx, r6.xyzx
                rsq r1.w, r1.w
                mul r6.xyz, r1.wwww, r6.xyzx  // vout<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mul r7.xyz, r5.yzxy, r6.zxyz
                mul r8.xyz, r5.zxyz, r6.yzxy
                mov r8.xyz, -r8.xyzx
                add r7.xyz, r7.xyzx, r8.xyzx
                mul r7.xyz, r7.xyzx, v3.wwww
                dp3 r1.w, r7.xyzx, r7.xyzx
                rsq r1.w, r1.w
                mul r7.xyz, r1.wwww, r7.xyzx  // vout<22:NaN:Inf,23:NaN:Inf,24:NaN:Inf>
                
                #line 75
                dp4 r8.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r8.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r8.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                
                #line 78
                dp4 r9.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r9.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r9.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r9.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 81
                mov r0.xy, v2.xyxx  // vout<28,29>
                mov o0.xyzw, r9.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r8.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r1.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r5.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xyz, r2.xyzx  // VS<13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o5.xyz, r6.xyzx  // VS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o6.xyz, r3.xyzx  // VS<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mov o7.xyz, r7.xyzx  // VS<22:NaN:Inf,23:NaN:Inf,24:NaN:Inf>
                mov o8.xyz, r4.xyzx  // VS<25:NaN:Inf,26:NaN:Inf,27:NaN:Inf>
                mov o9.xy, r0.xyxx  // VS<28,29>
                ret 
                // Approximately 61 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // samLinear                         sampler      NA          NA    1        1
                // gNormalMap                        texture  float4          2d    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // POSITION                 1   xyz         2     NONE  float     z 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // NORMAL                   1   xyz         4     NONE  float   xyz 
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                // TANGENT                  1   xyz         6     NONE  float   xyz 
                // BITANGENT                0   xyz         7     NONE  float   xyz 
                // BITANGENT                1   xyz         8     NONE  float   xyz 
                // TEXCOORD                 0   xy          9     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                // SV_Target                1   xyzw        1   TARGET  float   xyzw
                // SV_Target                2   xyzw        2   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.z
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v5.xyz
                dcl_input_ps linear v6.xyz
                dcl_input_ps linear v7.xyz
                dcl_input_ps linear v8.xyz
                dcl_input_ps linear v9.xy
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_temps 7
                
                #line 91 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\GBuffer\GBuffer.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v9.xyxx, t1.wxyz, s1
                mov r0.x, r0.x  // texColor<3:Inf>
                add r0.x, r0.x, l(-0.100000)
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard r0.x
                
                #line 103
                dp3 r0.x, v5.xyzx, v5.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v5.xyzx  // tangentFrameW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, v7.xyzx, v7.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v7.xyzx  // tangentFrameW<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                dp3 r0.w, v3.xyzx, v3.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v3.xyzx  // tangentFrameW<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                
                #line 108
                dp3 r0.w, v6.xyzx, v6.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, v6.xyzx  // tangentFrameV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, v8.xyzx, v8.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, v8.xyzx  // tangentFrameV<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                dp3 r0.w, v4.xyzx, v4.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, v4.xyzx  // tangentFrameV<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r6.xyz, v9.xyxx, t0.xyzw, s0
                mov r6.xyz, r6.xyzx  // normalT<0:Inf,1:Inf,2:Inf>
                mul r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r6.xyz, r6.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx  // normalT<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 114
                mul r0.xyz, r0.xyzx, r6.xxxx
                mul r1.xyz, r1.xyzx, r6.yyyy
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, r2.xyzx, r6.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 117
                mul r1.xyz, r3.xyzx, r6.xxxx
                mul r2.xyz, r4.xyzx, r6.yyyy
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, r5.xyzx, r6.zzzz
                add r1.xyz, r1.xyzx, r2.xyzx  // pin<13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                
                #line 128
                mov r0.xyz, r0.xyzx  // output<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r2.xyz, v1.xyzx  // output<4,5,6>
                mov r2.w, l(1.000000)  // output<7: 1f>
                mov r1.xyz, r1.xyzx  // output<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov r1.w, v2.z  // output<11>
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                mov o1.xyzw, r2.xyzw  // PS<4,5,6,7: 1f>
                mov o2.xyzw, r1.xyzw  // PS<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11>
                ret 
                // Approximately 51 instruction slots used
                            
            };
        }

    }

}

