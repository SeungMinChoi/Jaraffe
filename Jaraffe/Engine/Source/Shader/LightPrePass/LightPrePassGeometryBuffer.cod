//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldView;                // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
}

//
// 3 local object(s)
//
Texture2D gNormalMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 Basic
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // BITANGENT                0   xyz         4     NONE  float   xyz 
                // POSITION                 0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 55 "C:\Users\ccm13\Desktop\MyProjects\Git\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassGeometryBuffer.fx"
                dp3 r0.x, v1.xyzx, cb0[0].xyzx
                dp3 r0.y, v1.xyzx, cb0[1].xyzx
                dp3 r0.z, v1.xyzx, cb0[2].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // vout<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                
                #line 58
                dp3 r1.x, v3.xyzx, cb0[0].xyzx
                dp3 r1.y, v3.xyzx, cb0[1].xyzx
                dp3 r1.z, v3.xyzx, cb0[2].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // vout<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r3.xyz, r0.zxyz, r1.yzxy
                mov r3.xyz, -r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r2.xyz, r2.xyzx, v3.wwww
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // vout<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                
                #line 62
                mov r3.xyz, v0.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // vout<15:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // vout<16:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[2].xyzw  // vout<17:NaN:Inf>
                
                #line 65
                dp4 r5.x, r3.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r5.w, r3.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 68
                mov r3.xy, v2.xyxx  // vout<4,5>
                mov o0.xyzw, r5.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VS<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                mov o3.xyz, r1.xyzx  // VS<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mov o4.xyz, r2.xyzx  // VS<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                mov o5.xyz, r4.xyzx  // VS<15:NaN:Inf,16:NaN:Inf,17:NaN:Inf>
                mov o1.xy, r3.xyxx  // VS<4,5>
                ret 
                // Approximately 37 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // BITANGENT                0   xyz         4     NONE  float   xyz 
                // POSITION                 0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                // SV_Target                1   xyzw        1   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_temps 4
                
                #line 82 "C:\Users\ccm13\Desktop\MyProjects\Git\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassGeometryBuffer.fx"
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.xyzx  // tangentFrameW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, v4.xyzx, v4.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v4.xyzx  // tangentFrameW<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v2.xyzx  // tangentFrameW<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // normalT<0:Inf,1:Inf,2:Inf>
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r3.xyz, r3.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // normalT<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                mul r0.xyz, r0.xyzx, r3.xxxx
                mul r1.xyz, r1.xyzx, r3.yyyy
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, r2.xyzx, r3.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 97
                mov r0.xyz, r0.xyzx  // output<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyz, v5.xyzx  // output<4,5,6>
                mov r1.w, l(1.000000)  // output<7: 1f>
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                mov o1.xyzw, r1.xyzw  // PS<4,5,6,7: 1f>
                ret 
                // Approximately 28 instruction slots used
                            
            };
        }

    }

    technique11 Basic_NoNormal
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // BITANGENT                0   xyz         4     NONE  float   xyz 
                // POSITION                 0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 55 "C:\Users\ccm13\Desktop\MyProjects\Git\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassGeometryBuffer.fx"
                dp3 r0.x, v1.xyzx, cb0[0].xyzx
                dp3 r0.y, v1.xyzx, cb0[1].xyzx
                dp3 r0.z, v1.xyzx, cb0[2].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // vout<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                
                #line 58
                dp3 r1.x, v3.xyzx, cb0[0].xyzx
                dp3 r1.y, v3.xyzx, cb0[1].xyzx
                dp3 r1.z, v3.xyzx, cb0[2].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // vout<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r3.xyz, r0.zxyz, r1.yzxy
                mov r3.xyz, -r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r2.xyz, r2.xyzx, v3.wwww
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // vout<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                
                #line 62
                mov r3.xyz, v0.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // vout<15:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // vout<16:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[2].xyzw  // vout<17:NaN:Inf>
                
                #line 65
                dp4 r5.x, r3.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r5.w, r3.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 68
                mov r3.xy, v2.xyxx  // vout<4,5>
                mov o0.xyzw, r5.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VS<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                mov o3.xyz, r1.xyzx  // VS<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mov o4.xyz, r2.xyzx  // VS<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf>
                mov o5.xyz, r4.xyzx  // VS<15:NaN:Inf,16:NaN:Inf,17:NaN:Inf>
                mov o1.xy, r3.xyxx  // VS<4,5>
                ret 
                // Approximately 37 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // BITANGENT                0   xyz         4     NONE  float       
                // POSITION                 0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                // SV_Target                1   xyzw        1   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_temps 2
                
                #line 92 "C:\Users\ccm13\Desktop\MyProjects\Git\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassGeometryBuffer.fx"
                mov r0.xyz, v2.xyzx  // normalW<0,1,2>
                
                #line 97
                mov r0.xyz, r0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyz, v5.xyzx  // output<4,5,6>
                mov r1.w, l(1.000000)  // output<7: 1f>
                mov o0.xyzw, r0.xyzw  // PS<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // PS<4,5,6,7: 1f>
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

}

