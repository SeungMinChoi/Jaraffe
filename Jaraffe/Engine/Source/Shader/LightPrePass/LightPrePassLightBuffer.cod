//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbLightParams
{
    float3  LightPos;                   // Offset:    0, size:   12
    float3  LightColor;                 // Offset:   16, size:   12
    float3  LightDirection;             // Offset:   32, size:   12
    float2  SpotLightAngles;            // Offset:   48, size:    8
    float   LightRange;                 // Offset:   56, size:    4
}

cbuffer cbCameraParams
{
    float3  CameraPos;                  // Offset:    0, size:   12
}

//
// 2 local object(s)
//
Texture2D gNormalTexture;
Texture2D gPositionTexture;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 DirectionalLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                
                #line 76 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassLightBuffer.fx"
                mov o0.xyz, v0.xyzx  // VS<0,1,2>
                mov o0.w, l(1.000000)  // VS<3: 1f>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLightParams
                // {
                //
                //   float3 LightPos;                   // Offset:    0 Size:    12 [unused]
                //   float3 LightColor;                 // Offset:   16 Size:    12
                //   float3 LightDirection;             // Offset:   32 Size:    12
                //   float2 SpotLightAngles;            // Offset:   48 Size:     8 [unused]
                //   float LightRange;                  // Offset:   56 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbCameraParams
                // {
                //
                //   float3 CameraPos;                  // Offset:    0 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gNormalTexture                    texture  float4          2d    0        1
                // gPositionTexture                  texture  float4          2d    1        1
                // cbLightParams                     cbuffer      NA          NA    0        1
                // cbCameraParams                    cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 86 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassLightBuffer.fx"
                nop 
                mov r0.xy, v0.xyxx  // screenPos<0,1>
                
                #line 21
                ftoi r0.xy, r0.xyxx  // sampleIndices<0,1>
                mov r0.zw, l(0,0,0,0)  // sampleIndices<2: 0,2: 0>
                ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyww, t0.xyzw  // normalTex<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t1.xyzw
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                
                #line 86
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                nop 
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                
                #line 50
                mov r2.xyz, -cb0[2].xyzx  // L<0,1,2>
                
                #line 61
                dp3 r0.w, r1.xyzx, r2.xyzx
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // nDotL<0:[0f,1f]>
                mul r3.xyz, r0.wwww, cb0[1].xyzx
                mul r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // diffuse<0,1,2>
                
                #line 65
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, cb1[0].xyzx  // V<0:Inf,1:Inf,2:Inf>
                add r0.xyz, r0.xyzx, r2.xyzx
                dp3 r2.x, r0.xyzx, r0.xyzx
                rsq r2.x, r2.x
                mul r0.xyz, r0.xyzx, r2.xxxx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r1.xyzx, r0.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r1.w
                exp r0.x, r0.x
                mul r0.x, r0.x, l(1.000000)
                mul r3.w, r0.w, r0.x  // specular<0:NaN:Inf>
                
                #line 70
                mov r3.xyz, r3.xyzx  // CalcLighting<0,1,2>
                mov r3.w, r3.w  // CalcLighting<3:NaN:Inf>
                
                #line 88
                mov o0.xyzw, r3.xyzw  // PS<0,1,2,3:NaN:Inf>
                ret 
                // Approximately 40 instruction slots used
                            
            };
        }

    }

    technique11 PointLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                
                #line 76 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassLightBuffer.fx"
                mov o0.xyz, v0.xyzx  // VS<0,1,2>
                mov o0.w, l(1.000000)  // VS<3: 1f>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLightParams
                // {
                //
                //   float3 LightPos;                   // Offset:    0 Size:    12
                //   float3 LightColor;                 // Offset:   16 Size:    12
                //   float3 LightDirection;             // Offset:   32 Size:    12 [unused]
                //   float2 SpotLightAngles;            // Offset:   48 Size:     8 [unused]
                //   float LightRange;                  // Offset:   56 Size:     4
                //
                // }
                //
                // cbuffer cbCameraParams
                // {
                //
                //   float3 CameraPos;                  // Offset:    0 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gNormalTexture                    texture  float4          2d    0        1
                // gPositionTexture                  texture  float4          2d    1        1
                // cbLightParams                     cbuffer      NA          NA    0        1
                // cbCameraParams                    cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 86 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassLightBuffer.fx"
                nop 
                mov r0.xy, v0.xyxx  // screenPos<0,1>
                
                #line 21
                ftoi r0.xy, r0.xyxx  // sampleIndices<0,1>
                mov r0.zw, l(0,0,0,0)  // sampleIndices<2: 0,2: 0>
                ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyww, t0.xyzw  // normalTex<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t1.xyzw
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                
                #line 86
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                nop 
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                
                #line 39
                mov r0.xyz, -r0.xyzx
                add r2.xyz, r0.xyzx, cb0[0].xyzx  // L<0:Inf,1:Inf,2:Inf>
                
                #line 42
                dp3 r0.w, r2.xyzx, r2.xyzx
                sqrt r0.w, r0.w  // dist<0:NaN:Inf>
                div r2.w, r0.w, cb0[3].z
                mov r2.w, -r2.w
                add r2.w, r2.w, l(1.000000)
                max r2.w, r2.w, l(0.000000)  // attenuation<0:Inf:[-0f,1.#INFf]>
                div r2.xyz, r2.xyzx, r0.wwww  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 61
                dp3 r0.w, r1.xyzx, r2.xyzx
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // nDotL<0:[0f,1f]>
                mul r3.xyz, r0.wwww, cb0[1].xyzx
                mul r3.xyz, r2.wwww, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 65
                add r0.xyz, r0.xyzx, cb1[0].xyzx  // V<0:Inf,1:Inf,2:Inf>
                add r0.xyz, r0.xyzx, r2.xyzx
                dp3 r2.x, r0.xyzx, r0.xyzx
                rsq r2.x, r2.x
                mul r0.xyz, r0.xyzx, r2.xxxx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r1.xyzx, r0.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r1.w
                exp r0.x, r0.x
                mul r0.x, r2.w, r0.x
                mul r3.w, r0.w, r0.x  // specular<0:NaN:Inf>
                
                #line 70
                mov r3.xyz, r3.xyzx  // CalcLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r3.w  // CalcLighting<3:NaN:Inf>
                
                #line 88
                mov o0.xyzw, r3.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 47 instruction slots used
                            
            };
        }

    }

    technique11 Spotlight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                
                #line 76 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassLightBuffer.fx"
                mov o0.xyz, v0.xyzx  // VS<0,1,2>
                mov o0.w, l(1.000000)  // VS<3: 1f>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLightParams
                // {
                //
                //   float3 LightPos;                   // Offset:    0 Size:    12
                //   float3 LightColor;                 // Offset:   16 Size:    12
                //   float3 LightDirection;             // Offset:   32 Size:    12
                //   float2 SpotLightAngles;            // Offset:   48 Size:     8
                //   float LightRange;                  // Offset:   56 Size:     4
                //
                // }
                //
                // cbuffer cbCameraParams
                // {
                //
                //   float3 CameraPos;                  // Offset:    0 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gNormalTexture                    texture  float4          2d    0        1
                // gPositionTexture                  texture  float4          2d    1        1
                // cbLightParams                     cbuffer      NA          NA    0        1
                // cbCameraParams                    cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 86 "D:\Jaraffe\Jaraffe\Engine\Source\Shader\LightPrePass\LightPrePassLightBuffer.fx"
                nop 
                mov r0.xy, v0.xyxx  // screenPos<0,1>
                
                #line 21
                ftoi r0.xy, r0.xyxx  // sampleIndices<0,1>
                mov r0.zw, l(0,0,0,0)  // sampleIndices<2: 0,2: 0>
                ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyww, t0.xyzw  // normalTex<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t1.xyzw
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                
                #line 86
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                nop 
                mov r1.xyz, r1.xyzx  // normal<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // position<0:Inf,1:Inf,2:Inf>
                mov r1.w, r1.w  // specularPower<0:Inf>
                
                #line 39
                mov r0.xyz, -r0.xyzx
                add r2.xyz, r0.xyzx, cb0[0].xyzx  // L<0:Inf,1:Inf,2:Inf>
                
                #line 42
                dp3 r0.w, r2.xyzx, r2.xyzx
                sqrt r0.w, r0.w  // dist<0:NaN:Inf>
                div r2.w, r0.w, cb0[3].z
                mov r2.w, -r2.w
                add r2.w, r2.w, l(1.000000)
                max r2.w, r2.w, l(0.000000)  // attenuation<0:Inf:[-0f,1.#INFf]>
                div r2.xyz, r2.xyzx, r0.wwww  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                mov r3.xyz, cb0[2].xyzx  // L2<0,1,2>
                mov r4.xyz, -r2.xyzx
                dp3 r0.w, r4.xyzx, r3.xyzx  // rho<0:NaN:Inf>
                mov r3.x, -cb0[3].y
                add r0.w, r0.w, r3.x
                add r3.x, r3.x, cb0[3].x
                div r0.w, r0.w, r3.x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)
                mul r0.w, r0.w, r2.w  // attenuation<0:NaN:Inf>
                
                #line 61
                dp3 r2.w, r1.xyzx, r2.xyzx
                max r2.w, r2.w, l(0.000000)
                min r2.w, r2.w, l(1.000000)  // nDotL<0:[0f,1f]>
                mul r3.xyz, r2.wwww, cb0[1].xyzx
                mul r3.xyz, r0.wwww, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 65
                add r0.xyz, r0.xyzx, cb1[0].xyzx  // V<0:Inf,1:Inf,2:Inf>
                add r0.xyz, r0.xyzx, r2.xyzx
                dp3 r2.x, r0.xyzx, r0.xyzx
                rsq r2.x, r2.x
                mul r0.xyz, r0.xyzx, r2.xxxx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r1.xyzx, r0.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r1.w
                exp r0.x, r0.x
                mul r0.x, r0.w, r0.x
                mul r3.w, r2.w, r0.x  // specular<0:NaN:Inf>
                
                #line 70
                mov r3.xyz, r3.xyzx  // CalcLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r3.w  // CalcLighting<3:NaN:Inf>
                
                #line 88
                mov o0.xyzw, r3.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 57 instruction slots used
                            
            };
        }

    }

}

